drop table if exists root.michellefukunaga.telematics_eligibility;
create table root.michellefukunaga.telematics_eligibility as (
	
	With profile as (
	select *
	from (
			select account_id, 
			id as profile_id,
  			primary_named_insured_id,
  			created_at as profile_timestamp,
  			row_number() over(partition by account_id order by created_at desc) as rn
  			from app_domain.profiles
		) 
	where rn = 1

),

	pni_driver AS (
	SELECT account_id,
	d.profile_id,
	lower(first_name || '-' || last_name || '-' || dob) as name,
	d.universal_driver_id,
	id as driver_id
	from app_domain.drivers d
		join profile p on d.profile_id = p.profile_id and d.id = p.primary_named_insured_id
),

 	accounts as (
	select u.account_id,
		da.account_classification,
		u.telematics_user_id,
		i.*
	from root.michellefukunaga.installs i
		join app_domain.users u on i.user_id = u.id
		join edw.dim_account da on da.account_id = u.account_id and da.is_suspicious = 'FALSE' and da.in_market = 'TRUE' and da.is_current = 'true'
			and u.id not in (select distinct testable_id from app_domain.ab_tests where trim(name) = 'empty_test_drive')
			and u.account_id not in (select distinct testable_id from app_domain.ab_tests where trim(name) = 'one_product_v1')
		join pni_driver d on da.account_id = d.account_id and u.universal_driver_id = d.universal_driver_id
	where not da.state = 'CA'
	and not da.account_classification = 'SKIP_DRIVE'
	and i.os in ('iOS', 'Android') 
	and not i.app_version is null


),

	eligible AS(
		SELECT
			telematics_user_id,
			eligible_at as ubi_eligible_date,
			push_to_no_use as ubi_ptnu
		FROM (SELECT
			ubi.telematics_user_id,
				ubi.created_at AS eligible_at,
				ubi.push_to_no_use,
				ROW_NUMBER() OVER (PARTITION BY ubi.telematics_user_id ORDER BY ubi.created_at ASC) AS rank
			FROM app_daveability.telematics_scoring_results ubi
			WHERE eligible = 1
				and ubi.scoring_model = 'ubi2'
				and created_at::DATE = as_of_date::DATE 
		) 	
		WHERE rank = 1
	),
	
	last_trip as (
		select telematics_user_id,
			max(trip_timestamp) as last_trip_timestamp
		from (
			select t.telematics_user_id,
				t.created_at as trip_timestamp
			from app_telematics.trips t
				join eligible e on t.telematics_user_id = e.telematics_user_id and t.created_at <= e.ubi_eligible_date
		)
		group by 1
	),
	
	telematics_eligibility AS
	(
		SELECT distinct ta.account_id,
		ta.telematics_user_id,
		ta.user_id,
		ta.os,
		fca.first_trip_recorded_timestamp,
		l.last_trip_timestamp,
		case when datediff(d, fca.first_trip_recorded_timestamp, fca.profile_created_timestamp) >= 50 then fca.profile_created_timestamp
			else coalesce(fca.first_trip_recorded_timestamp, fca.profile_created_timestamp)
		end as test_drive_start_date,
		case when e.ubi_eligible_date < fca.underwriting_decision_timestamp then e.ubi_eligible_date 
			else coalesce(fca.underwriting_decision_timestamp, dateadd('day', 45, test_drive_start_date))
		end as test_drive_end_date,
		case when datediff('day', sysdate, test_drive_end_date) > 0 then datediff('day', test_drive_start_date, sysdate) 
			else datediff('day', test_drive_start_date, test_drive_end_date) 
		end as trip_development_days,
		fca.policy_bound_timestamp,
		fca.final_bind_timestamp,
		fca.profile_created_timestamp,
		e.ubi_eligible_date relevant_eligible_date,
		e.ubi_ptnu relevant_ptnu,
	
		CASE WHEN e.ubi_eligible_date IS NULL THEN 'Not Eligible'
			WHEN datediff(d,test_drive_start_date,e.ubi_eligible_date) <= 45 AND ubi_ptnu = 0 THEN 'Eligible'
			WHEN (ubi_ptnu = 1 OR datediff(d,test_drive_start_date,e.ubi_eligible_date) > 45) AND DATEDIFF(h, l.last_trip_timestamp, e.ubi_eligible_date) > 48 THEN 'Forced Push To No Use'
			WHEN (ubi_ptnu = 1 OR datediff(d,test_drive_start_date, e.ubi_eligible_date) > 45) AND DATEDIFF(h, l.last_trip_timestamp, e.ubi_eligible_date) <= 48 THEN 'Push To No Use'
		END AS eligible_flag
		
		FROM accounts ta
			join edw.fact_conversion_accumulating fca on fca.account_id = ta.account_id and fca.is_current = TRUE
			LEFT JOIN eligible e ON ta.telematics_user_id = e.telematics_user_id
			LEFT JOIN last_trip l on ta.telematics_user_id = l.telematics_user_id

		WHERE ta.account_classification = 'CLASSIC'

		
		UNION ALL

		SELECT
		distinct ta.account_id,
		ta.telematics_user_id,
		ta.user_id,
		ta.os,
		fca.first_trip_recorded_timestamp,
		l.last_trip_timestamp,
		fca.policy_bound_timestamp as test_drive_start_date,
		coalesce(fca.day_zero_underwriting_decision_timestamp, dateadd(day, 30, test_drive_start_date)) as test_drive_end_date,
		fca.policy_development_days as trip_development_days,
		fca.policy_bound_timestamp,
		fca.final_bind_timestamp,
		fca.profile_created_timestamp,
		e.ubi_eligible_date relevant_eligible_date,
		e.ubi_ptnu relevant_ptnu,
				
		CASE WHEN e.ubi_eligible_date IS NULL AND datediff(d,test_drive_start_date, GETDATE()::DATE) < trip_development_days THEN 'Not Eligible'
	            WHEN e.ubi_eligible_date IS NULL AND datediff(d,test_drive_start_date, GETDATE()::DATE) > 30 THEN 'Push To No Use'
				WHEN datediff(d, test_drive_start_date, e.ubi_eligible_date) <= trip_development_days AND ubi_ptnu = 0 THEN 'Eligible'
				WHEN datediff(d, test_drive_start_date, e.ubi_eligible_date) > trip_development_days OR ubi_ptnu = 1 THEN 'Push To No Use'
		END AS eligible_flag
		
		FROM accounts ta
			join edw.fact_conversion_accumulating fca on fca.account_id = ta.account_id and fca.policy_development_days = 30
			LEFT JOIN eligible e ON ta.telematics_user_id = e.telematics_user_id	
			LEFT JOIN last_trip l on ta.telematics_user_id = l.telematics_user_id
		WHERE ta.account_classification = 'DAY_ZERO'
	  	AND fca.policy_bound_timestamp IS NOT NULL

)

	select *
	from telematics_eligibility
);
